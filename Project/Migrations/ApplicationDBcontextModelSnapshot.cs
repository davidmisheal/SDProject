// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Data;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(ApplicationDBcontext))]
    partial class ApplicationDBcontextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Project.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("GenreType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Movie_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminID");

                    b.HasIndex("Movie_Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Project.Models.Hall", b =>
                {
                    b.Property<int>("Hall_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Hall_Id"));

                    b.Property<int>("Hall_Num")
                        .HasColumnType("int");

                    b.HasKey("Hall_Id");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Project.Models.Movie", b =>
                {
                    b.Property<int>("Movie_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Movie_Id"));

                    b.Property<int?>("AdminID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("GenreID")
                        .HasColumnType("int");

                    b.Property<int?>("HallID")
                        .HasColumnType("int");

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Movie_Id");

                    b.HasIndex("AdminID");

                    b.HasIndex("GenreID");

                    b.HasIndex("HallID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Project.Models.Reservation", b =>
                {
                    b.Property<int>("Res_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Res_Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Hall_Id")
                        .HasColumnType("int");

                    b.Property<int>("M_Id")
                        .HasColumnType("int");

                    b.Property<int?>("MovieID")
                        .HasColumnType("int");

                    b.Property<int>("Pay_Id")
                        .HasColumnType("int");

                    b.Property<int>("Seat_Id")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Res_Id");

                    b.HasIndex("MovieID");

                    b.HasIndex("UserID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Project.Models.Seat", b =>
                {
                    b.Property<int>("Seat_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Seat_Id"));

                    b.Property<int?>("HallID")
                        .HasColumnType("int");

                    b.Property<int?>("ReservationRes_Id")
                        .HasColumnType("int");

                    b.Property<int>("Seat_Num")
                        .HasColumnType("int");

                    b.HasKey("Seat_Id");

                    b.HasIndex("HallID");

                    b.HasIndex("ReservationRes_Id");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Project.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_NUmber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Project.Models.Genre", b =>
                {
                    b.HasOne("Project.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID");

                    b.HasOne("Project.Models.Movie", null)
                        .WithMany("Genres")
                        .HasForeignKey("Movie_Id");

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Project.Models.Movie", b =>
                {
                    b.HasOne("Project.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID");

                    b.HasOne("Project.Models.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreID");

                    b.HasOne("Project.Models.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallID");

                    b.Navigation("Admin");

                    b.Navigation("Genre");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Project.Models.Reservation", b =>
                {
                    b.HasOne("Project.Models.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieID");

                    b.HasOne("Project.Models.User", "User")
                        .WithMany("Reservations")
                        .HasForeignKey("UserID");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project.Models.Seat", b =>
                {
                    b.HasOne("Project.Models.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallID");

                    b.HasOne("Project.Models.Reservation", null)
                        .WithMany("Seats")
                        .HasForeignKey("ReservationRes_Id");

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Project.Models.User", b =>
                {
                    b.HasOne("Project.Models.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Project.Models.Movie", b =>
                {
                    b.Navigation("Genres");
                });

            modelBuilder.Entity("Project.Models.Reservation", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Project.Models.User", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
